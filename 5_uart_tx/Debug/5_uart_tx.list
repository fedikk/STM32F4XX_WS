
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000021c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  4 .ARM          00000000  080003b0  080003b0  000103b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003b0  080003b8  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003b0  080003b0  000103b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003b4  080003b4  000103b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003b8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003b8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000103b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000546  00000000  00000000  000103e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000187  00000000  00000000  0001092e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00010ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00010b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000db9d  00000000  00000000  00010b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000005c2  00000000  00000000  0001e70d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004f884  00000000  00000000  0001eccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0006e553  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000e8  00000000  00000000  0006e5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000398 	.word	0x08000398

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000398 	.word	0x08000398

080001d4 <main>:
void uar2_tx_init(void);
void uart2_write(int ch);



int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	uar2_tx_init();
 80001d8:	f000 f804 	bl	80001e4 <uar2_tx_init>

	while(1){
		uart2_write('B');
 80001dc:	2042      	movs	r0, #66	; 0x42
 80001de:	f000 f875 	bl	80002cc <uart2_write>
 80001e2:	e7fb      	b.n	80001dc <main+0x8>

080001e4 <uar2_tx_init>:
	}
	return 0;
}

void  uar2_tx_init(){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	/*configure uart GPIO pin*/
	RCC->AHB1ENR    |=  GPIOAEN;
 80001e8:	4b21      	ldr	r3, [pc, #132]	; (8000270 <uar2_tx_init+0x8c>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a20      	ldr	r2, [pc, #128]	; (8000270 <uar2_tx_init+0x8c>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30

	/* set PA2 to alternate function mode */

	GPIOA->MODER	&=~ (1U<<4);
 80001f4:	4b1f      	ldr	r3, [pc, #124]	; (8000274 <uar2_tx_init+0x90>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a1e      	ldr	r2, [pc, #120]	; (8000274 <uar2_tx_init+0x90>)
 80001fa:	f023 0310 	bic.w	r3, r3, #16
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER	|=  (1U<<5);
 8000200:	4b1c      	ldr	r3, [pc, #112]	; (8000274 <uar2_tx_init+0x90>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a1b      	ldr	r2, [pc, #108]	; (8000274 <uar2_tx_init+0x90>)
 8000206:	f043 0320 	orr.w	r3, r3, #32
 800020a:	6013      	str	r3, [r2, #0]


	/*AFR[0] Pin 0..7*/
	/*AFR[1] Pin 8..15*/
	//GPIOA->AFR[0]   |=  (7<<8);
	GPIOA->AFR[0]   |=  (1<<8);
 800020c:	4b19      	ldr	r3, [pc, #100]	; (8000274 <uar2_tx_init+0x90>)
 800020e:	6a1b      	ldr	r3, [r3, #32]
 8000210:	4a18      	ldr	r2, [pc, #96]	; (8000274 <uar2_tx_init+0x90>)
 8000212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000216:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]   |=  (1<<9);
 8000218:	4b16      	ldr	r3, [pc, #88]	; (8000274 <uar2_tx_init+0x90>)
 800021a:	6a1b      	ldr	r3, [r3, #32]
 800021c:	4a15      	ldr	r2, [pc, #84]	; (8000274 <uar2_tx_init+0x90>)
 800021e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000222:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]   |=  (1<<10);
 8000224:	4b13      	ldr	r3, [pc, #76]	; (8000274 <uar2_tx_init+0x90>)
 8000226:	6a1b      	ldr	r3, [r3, #32]
 8000228:	4a12      	ldr	r2, [pc, #72]	; (8000274 <uar2_tx_init+0x90>)
 800022a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800022e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]	&= ~(1U<<11);
 8000230:	4b10      	ldr	r3, [pc, #64]	; (8000274 <uar2_tx_init+0x90>)
 8000232:	6a1b      	ldr	r3, [r3, #32]
 8000234:	4a0f      	ldr	r2, [pc, #60]	; (8000274 <uar2_tx_init+0x90>)
 8000236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800023a:	6213      	str	r3, [r2, #32]

	/*********************Configure the uart module***********************/
	/*enable clock to uart2*/
	RCC->APB1ENR 	 |= UART2EN;
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <uar2_tx_init+0x8c>)
 800023e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000240:	4a0b      	ldr	r2, [pc, #44]	; (8000270 <uar2_tx_init+0x8c>)
 8000242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000246:	6413      	str	r3, [r2, #64]	; 0x40
	/*configure bd*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000248:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800024c:	490a      	ldr	r1, [pc, #40]	; (8000278 <uar2_tx_init+0x94>)
 800024e:	480b      	ldr	r0, [pc, #44]	; (800027c <uar2_tx_init+0x98>)
 8000250:	f000 f816 	bl	8000280 <uart_set_baudrate>
	/*configure the transfer direction*/
	USART2->CR1      |= CR1_TE;
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <uar2_tx_init+0x98>)
 8000256:	68db      	ldr	r3, [r3, #12]
 8000258:	4a08      	ldr	r2, [pc, #32]	; (800027c <uar2_tx_init+0x98>)
 800025a:	f043 0308 	orr.w	r3, r3, #8
 800025e:	60d3      	str	r3, [r2, #12]
	/*enable uart module*/
	USART2->CR1      |= CR1_UE;
 8000260:	4b06      	ldr	r3, [pc, #24]	; (800027c <uar2_tx_init+0x98>)
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	4a05      	ldr	r2, [pc, #20]	; (800027c <uar2_tx_init+0x98>)
 8000266:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026a:	60d3      	str	r3, [r2, #12]

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40023800 	.word	0x40023800
 8000274:	40020000 	.word	0x40020000
 8000278:	00f42400 	.word	0x00f42400
 800027c:	40004400 	.word	0x40004400

08000280 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk, uint32_t BaudRate) {
 8000280:	b580      	push	{r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	68b8      	ldr	r0, [r7, #8]
 8000290:	f000 f808 	bl	80002a4 <compute_uart_bd>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	609a      	str	r2, [r3, #8]
}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
	return ((PeriphClk+(BaudRate/2U))/BaudRate);
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	085a      	lsrs	r2, r3, #1
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	441a      	add	r2, r3
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002bc:	b29b      	uxth	r3, r3
}
 80002be:	4618      	mov	r0, r3
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
	...

080002cc <uart2_write>:


void uart2_write(int ch){
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while (!(USART2->SR & SR_TXE)) {}   // while ((USART2->SR & SR_TXE)==0)   ma3neha mezelna 9a3din nab3thou
 80002d4:	bf00      	nop
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <uart2_write+0x2c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <uart2_write+0xa>
	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <uart2_write+0x2c>)
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	6053      	str	r3, [r2, #4]

}
 80002ea:	bf00      	nop
 80002ec:	370c      	adds	r7, #12
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40004400 	.word	0x40004400

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	; (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	; (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	; (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	; (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	; (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	; (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 f811 	bl	8000350 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ff51 	bl	80001d4 <main>

08000332 <LoopForever>:

LoopForever:
    b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000340:	080003b8 	.word	0x080003b8
  ldr r2, =_sbss
 8000344:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000348:	2000001c 	.word	0x2000001c

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <__libc_init_array>:
 8000350:	b570      	push	{r4, r5, r6, lr}
 8000352:	4d0d      	ldr	r5, [pc, #52]	; (8000388 <__libc_init_array+0x38>)
 8000354:	4c0d      	ldr	r4, [pc, #52]	; (800038c <__libc_init_array+0x3c>)
 8000356:	1b64      	subs	r4, r4, r5
 8000358:	10a4      	asrs	r4, r4, #2
 800035a:	2600      	movs	r6, #0
 800035c:	42a6      	cmp	r6, r4
 800035e:	d109      	bne.n	8000374 <__libc_init_array+0x24>
 8000360:	4d0b      	ldr	r5, [pc, #44]	; (8000390 <__libc_init_array+0x40>)
 8000362:	4c0c      	ldr	r4, [pc, #48]	; (8000394 <__libc_init_array+0x44>)
 8000364:	f000 f818 	bl	8000398 <_init>
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	2600      	movs	r6, #0
 800036e:	42a6      	cmp	r6, r4
 8000370:	d105      	bne.n	800037e <__libc_init_array+0x2e>
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f855 3b04 	ldr.w	r3, [r5], #4
 8000378:	4798      	blx	r3
 800037a:	3601      	adds	r6, #1
 800037c:	e7ee      	b.n	800035c <__libc_init_array+0xc>
 800037e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000382:	4798      	blx	r3
 8000384:	3601      	adds	r6, #1
 8000386:	e7f2      	b.n	800036e <__libc_init_array+0x1e>
 8000388:	080003b0 	.word	0x080003b0
 800038c:	080003b0 	.word	0x080003b0
 8000390:	080003b0 	.word	0x080003b0
 8000394:	080003b4 	.word	0x080003b4

08000398 <_init>:
 8000398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800039a:	bf00      	nop
 800039c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800039e:	bc08      	pop	{r3}
 80003a0:	469e      	mov	lr, r3
 80003a2:	4770      	bx	lr

080003a4 <_fini>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	bf00      	nop
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr
