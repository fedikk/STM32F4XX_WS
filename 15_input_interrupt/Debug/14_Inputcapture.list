
14_Inputcapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00010424  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  08000424  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000424  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000424  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001087  00000000  00000000  00010454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002ad  00000000  00000000  000114db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00011788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000050  00000000  00000000  00011800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001133  00000000  00000000  00011850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c75  00000000  00000000  00012983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053c0b  00000000  00000000  000135f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00067203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c8  00000000  00000000  00067258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000404 	.word	0x08000404

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000404 	.word	0x08000404

080001d4 <main>:
#include "systick.h"
#include "tim.h"

int timestamp=0;
/*SET UP : Connect a jumper wire from PA5 to PA6*/
int main(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0

	tim2_PA5_output_compare();
 80001d8:	f000 f814 	bl	8000204 <tim2_PA5_output_compare>
	tim3_PA6_input_capture();
 80001dc:	f000 f870 	bl	80002c0 <tim3_PA6_input_capture>


	while(1){
		//wait until the edge is captured
		while (!(TIM3->SR & CC1_IF)) {}
 80001e0:	bf00      	nop
 80001e2:	4b06      	ldr	r3, [pc, #24]	; (80001fc <main+0x28>)
 80001e4:	691b      	ldr	r3, [r3, #16]
 80001e6:	f003 0302 	and.w	r3, r3, #2
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d0f9      	beq.n	80001e2 <main+0xe>
		//Read the value
		timestamp= TIM3->CCR1 ;
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <main+0x28>)
 80001f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80001f2:	461a      	mov	r2, r3
 80001f4:	4b02      	ldr	r3, [pc, #8]	; (8000200 <main+0x2c>)
 80001f6:	601a      	str	r2, [r3, #0]
		while (!(TIM3->SR & CC1_IF)) {}
 80001f8:	e7f2      	b.n	80001e0 <main+0xc>
 80001fa:	bf00      	nop
 80001fc:	40000400 	.word	0x40000400
 8000200:	2000001c 	.word	0x2000001c

08000204 <tim2_PA5_output_compare>:
	/*Enable Timer*/
	TIM2->CR1 |= CR1_CEN ;
}


void tim2_PA5_output_compare(void) {
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0

	/*Enable access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN ;
 8000208:	4b2b      	ldr	r3, [pc, #172]	; (80002b8 <tim2_PA5_output_compare+0xb4>)
 800020a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020c:	4a2a      	ldr	r2, [pc, #168]	; (80002b8 <tim2_PA5_output_compare+0xb4>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6313      	str	r3, [r2, #48]	; 0x30
	/*Set the pin PA5 to an alternate function*/
	GPIOA->MODER &=~ (1U<<10);
 8000214:	4b29      	ldr	r3, [pc, #164]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a28      	ldr	r2, [pc, #160]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 800021a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800021e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<11);
 8000220:	4b26      	ldr	r3, [pc, #152]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a25      	ldr	r2, [pc, #148]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 8000226:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800022a:	6013      	str	r3, [r2, #0]
	/*SEt PA to AF01*/
	GPIOA->AFR[0] |= (1U<<20);
 800022c:	4b23      	ldr	r3, [pc, #140]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 800022e:	6a1b      	ldr	r3, [r3, #32]
 8000230:	4a22      	ldr	r2, [pc, #136]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 8000232:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000236:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<21);
 8000238:	4b20      	ldr	r3, [pc, #128]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	4a1f      	ldr	r2, [pc, #124]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 800023e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000242:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<22);
 8000244:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 8000246:	6a1b      	ldr	r3, [r3, #32]
 8000248:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 800024a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800024e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<23);
 8000250:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 8000252:	6a1b      	ldr	r3, [r3, #32]
 8000254:	4a19      	ldr	r2, [pc, #100]	; (80002bc <tim2_PA5_output_compare+0xb8>)
 8000256:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800025a:	6213      	str	r3, [r2, #32]
	/*Enable access to tim2 */
	RCC->APB1ENR |= TIM2EN ;
 800025c:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <tim2_PA5_output_compare+0xb4>)
 800025e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000260:	4a15      	ldr	r2, [pc, #84]	; (80002b8 <tim2_PA5_output_compare+0xb4>)
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6413      	str	r3, [r2, #64]	; 0x40
	/*Set the Prescaler Value*/
	TIM2->PSC = 1600 - 1 ;		// 16 000 000 / 1600 = 10 000
 8000268:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800026c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000270:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set the auto-reload value */
	TIM2->ARR = 10000 - 1 ;
 8000272:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000276:	f242 720f 	movw	r2, #9999	; 0x270f
 800027a:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Set Output Compare toggle mode */
	TIM2->CCMR1 = OC_TOGGLE;
 800027c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000280:	2230      	movs	r2, #48	; 0x30
 8000282:	619a      	str	r2, [r3, #24]
	/*Enable Tim2 ch1 in compare mode */
	TIM2->CCER |=  CCER_CC1E ;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000288:	6a1b      	ldr	r3, [r3, #32]
 800028a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6213      	str	r3, [r2, #32]

	/*clear counter*/
	TIM2->CNT = 0 ;
 8000294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000298:	2200      	movs	r2, #0
 800029a:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable Timer*/
	TIM2->CR1 |= CR1_CEN ;
 800029c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	40023800 	.word	0x40023800
 80002bc:	40020000 	.word	0x40020000

080002c0 <tim3_PA6_input_capture>:

void tim3_PA6_input_capture(void) {
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	/*Enable access to GPIOA*/
		RCC->AHB1ENR |= GPIOAEN ;
 80002c4:	4b25      	ldr	r3, [pc, #148]	; (800035c <tim3_PA6_input_capture+0x9c>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c8:	4a24      	ldr	r2, [pc, #144]	; (800035c <tim3_PA6_input_capture+0x9c>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6313      	str	r3, [r2, #48]	; 0x30
		/*Set the pin PA6 to an alternate function*/
		GPIOA->MODER &=~ (1U<<12);
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a22      	ldr	r2, [pc, #136]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 80002d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002da:	6013      	str	r3, [r2, #0]
		GPIOA->MODER |= (1U<<13);
 80002dc:	4b20      	ldr	r3, [pc, #128]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1f      	ldr	r2, [pc, #124]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 80002e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002e6:	6013      	str	r3, [r2, #0]
		/*SEt PA6 to AF02*/
		GPIOA->AFR[0] |= (1U<<25);
 80002e8:	4b1d      	ldr	r3, [pc, #116]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	4a1c      	ldr	r2, [pc, #112]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 80002ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80002f2:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &=~(1U<<24);
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a19      	ldr	r2, [pc, #100]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 80002fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80002fe:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &=~(1U<<26);
 8000300:	4b17      	ldr	r3, [pc, #92]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	4a16      	ldr	r2, [pc, #88]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 8000306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800030a:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &=~(1U<<27);
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 800030e:	6a1b      	ldr	r3, [r3, #32]
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <tim3_PA6_input_capture+0xa0>)
 8000312:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000316:	6213      	str	r3, [r2, #32]
		/*Enable access to tim3 */
		RCC->APB1ENR |= TIM3EN ;
 8000318:	4b10      	ldr	r3, [pc, #64]	; (800035c <tim3_PA6_input_capture+0x9c>)
 800031a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800031c:	4a0f      	ldr	r2, [pc, #60]	; (800035c <tim3_PA6_input_capture+0x9c>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6413      	str	r3, [r2, #64]	; 0x40
		/*Set the Prescaler Value*/
		TIM3->PSC = 1600 - 1 ;		// 16 000 000 / 1600 = 10 000
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <tim3_PA6_input_capture+0xa4>)
 8000326:	f240 623f 	movw	r2, #1599	; 0x63f
 800032a:	629a      	str	r2, [r3, #40]	; 0x28
		/*Set CH1 to input capture */
		TIM3->CCMR1 |= CCER_CC1S;
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <tim3_PA6_input_capture+0xa4>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <tim3_PA6_input_capture+0xa4>)
 8000332:	f043 0302 	orr.w	r3, r3, #2
 8000336:	6193      	str	r3, [r2, #24]
		/*Set CH1 to capture at rising edge */
		TIM3->CCER  |= CCER_CC1E;
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <tim3_PA6_input_capture+0xa4>)
 800033a:	6a1b      	ldr	r3, [r3, #32]
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <tim3_PA6_input_capture+0xa4>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	6213      	str	r3, [r2, #32]
		/*Enable TIM3*/
		TIM3->CR1 |= CR1_CEN ;
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <tim3_PA6_input_capture+0xa4>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a06      	ldr	r2, [pc, #24]	; (8000364 <tim3_PA6_input_capture+0xa4>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40020000 	.word	0x40020000
 8000364:	40000400 	.word	0x40000400

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	; (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	; (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	; (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	; (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ff1b 	bl	80001d4 <main>

0800039e <LoopForever>:

LoopForever:
    b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003ac:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 80003b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b4:	20000020 	.word	0x20000020

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4d0d      	ldr	r5, [pc, #52]	; (80003f4 <__libc_init_array+0x38>)
 80003c0:	4c0d      	ldr	r4, [pc, #52]	; (80003f8 <__libc_init_array+0x3c>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	2600      	movs	r6, #0
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	4d0b      	ldr	r5, [pc, #44]	; (80003fc <__libc_init_array+0x40>)
 80003ce:	4c0c      	ldr	r4, [pc, #48]	; (8000400 <__libc_init_array+0x44>)
 80003d0:	f000 f818 	bl	8000404 <_init>
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	10a4      	asrs	r4, r4, #2
 80003d8:	2600      	movs	r6, #0
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
